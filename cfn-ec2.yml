# Requires:
# - An S3 bucket called guydunton-mc-resources containing:
#       - mc-instance-start-script.sh
#       - minecraft.service
Description: EC2 instance for running a MC server.
Parameters:
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Ami Id for base image
  SshKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: SSH key name already existing within AWS
  WorldBucketName:
    Type: String
    Description: The bucket that the world data is stored in
  HostedZoneId:
    Type: String
    Description: The Hosted Zone ID in route 53 to add the EC2 Instance record to
  DomainName:
    Type: String
    Description: The domain name to add the DNS record to

Resources:
  # MC Instance
  MCServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      ImageId: !Ref AmiId
      UserData:
        Fn::Base64: |
          #!/bin/bash -x
          aws s3 cp s3://guydunton-mc-resources/mc-instance-start-script.sh ./
          chmod +x mc-instance-start-script.sh
          ./mc-instance-start-script.sh
      IamInstanceProfile: !Ref EC2S3InstanceProfile
      SecurityGroups:
        - !Ref MCSecurityGroup
      KeyName: !Ref SshKeyName
      Tags:
        - Key: Name
          Value: MC Server
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8

  # Minecraft data Volume
  MCDataVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 16
      AvailabilityZone: !GetAtt MCServerInstance.AvailabilityZone

  # Volume attachement
  MCDataVolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref MCServerInstance
      VolumeId: !Ref MCDataVolume
      Device: /dev/sdh

  # Security group with MC access
  MCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow TCP & UDP connection for Minecraft
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 25565
          ToPort: 25565
        - IpProtocol: udp
          CidrIp: 0.0.0.0/0
          FromPort: 25565
          ToPort: 25565
        - IpProtocol: tcp
          FromPort: 22
          CidrIp: 0.0.0.0/0
          ToPort: 22

  # Role
  EC2S3Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: EC2S3MCRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: "ReadWriteMCDataBucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource:
                  !Join ["", ["arn:aws:s3:::", !Ref WorldBucketName, "/*"]]

  # Role Profile
  EC2S3InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2S3Role

  # Route 53
  dnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      TTL: "300"
      ResourceRecords:
        - !GetAtt MCServerInstance.PublicIp

Outputs:
  InstanceIP:
    Description: The Instance Public IP
    Value: !GetAtt MCServerInstance.PublicIp
